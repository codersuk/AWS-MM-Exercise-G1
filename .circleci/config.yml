# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 3
jobs:
  Build-Service-One:
    parallelism: 4
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Service-1/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "Service-1/build.gradle" }}

      # run tests!
      - run:
      # NOTE: because the gradle file are in the Service-1 folder "gradle test" simply does not work
      # - run: gradle test     Error: Task 'test' not found in root project ...
          name: run unit tests
          command: Service-1/.gradle test 

      # create JAR file
      - run: 
          name: create JAR
          command: |
            cd Service-1 
            echo execute createJAR task
            gradle createJar
            echo JAR created

            #echo ls
            #ls
            #echo ------------

            #echo ls publish
            #ls publish
            #echo ------------

            echo "store the JAR in the workspace start..."
            mkdir -p /tmp/workspace/service-1
            cp publish/demo1-all-0.0.1-LATEST.jar /tmp/workspace/service-1/demo1-all-0.0.1-LATEST.jar
            echo "store the JAR in the workspace ...end"
      
      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      - persist_to_workspace :
          root: /tmp/workspace/service-1
          paths:
            - demo1-all-0.0.1-LATEST.jar
            
          #destination: artifact-file
    
      
  Create-Docker-Images:
    machine: true # Use a Linux VM instead of docker environment (so volumes work)
    steps:
      - checkout
      # - setup_remote_docker  Error: (setup_remote_docker): This step isn't compatible with machine executor. You can use Docker without a special step if the build image has it installed.

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: copy the JAR file into "publish" folder
          command: | 
            #echo where are we?
            #ls
            
            #echo what we have in workspace?
            #ls /tmp/workspace
            # why the JAR is not in "service-1" ??  /tmp/workspace/service-1/demo1-all-0.0.1-LATEST.jar
            mkdir Service-1/publish # we puth the JAR here
            cp /tmp/workspace/demo1-all-0.0.1-LATEST.jar Service-1/publish/demo1-all-0.0.1-LATEST.jar  

      # create the Docker images
      - run: 
          name: create Docker images
          command: docker-compose up -d

  Create-Docker-Images:
    docker: alpine
    steps:
      - run: echo not implemented yet


workflows:
  version: 2
  Do-It:
    jobs:
      - Build-Service-One
      - Create-Docker-Images:
          requires:
            - Build-Service-One
      - Publish-Docker-Images:
          requires:
            - Create-Docker-Images
