# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo/Service-1/

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Service-1/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "Service-1/build.gradle" }}

      # run tests!
      # https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html
      #- run: gradle test     Error: Task 'test' not found in root project ...

      #- run:
      #    name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
      #    # Use "./gradlew test" instead if tests are not run in parallel
      #    command: |
      #      cd ~/Service-1/src/test/java
      #      # Get list of classnames of tests that should run on this node
      #     CLASSNAMES=$(circleci tests glob "**/*.java" \
      #        | cut -c 1- | sed 's@/@.@g' \
      #        | sed 's/.\{5\}$//' \
      #        | circleci tests split --split-by=timings --timings-type=classname)
      #      cd ../../..
      #      # Format the arguments to "./gradlew test"
      #      #GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
      #      #echo "Prepared arguments for Gradle: $GRADLE_ARGS"
      #      # ./gradlew test $GRADLE_ARGS
      #      cd ~/Service-1
      #      ./gradlew test



      # create a single Jar with all dependencies
      task createJar(type: Jar) {
	      manifest {
          attributes 'Implementation-Title': 'Gradle Jar File for Service-1',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.example.demo1'
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
      }